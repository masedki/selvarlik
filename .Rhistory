if (missing(data)) {
stop("data is missing !")
}
if (missing(nbCluster)) {
stop("nbCluster is missing!")
q
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(order[g,], x, nbcluster[g])
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
require(parallel)
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
require(mclust)
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
#print(order)
# pour traiter les warnings comme des erreurs. sinon mclust fait n'importe quoi
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
if(class(tmp)=="try-error")
bicclust <- log(0)
else
bicclust <- tmp$bic
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
if(class(tmp)=="try-error")
bicclust <- log(0)
else
bicclust <- tmp$bic
?"mclustBIC"
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
tmp
if(class(tmp)=="try-error")
bicclust <- log(0)
bicclust
order
order[[1]]
loglikwrapper <-function(j,x,nbcluster){
# pour traiter les warnings comme des erreurs.
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
#tmp <- mixmodCluster(x[,j], nbCluster=nbcluster)
#if(tmp@error)
if(class(tmp)=="try-error")
return(log(0))
else
return(tmp$bic)
#return(tmp@bestResult@likelihood)
}
nbcores=detectCores(all.tests = FALSE, logical = FALSE)
junk <-  mclapply(X=as.list(1:ncol(x)),
FUN = loglikwrapper,
x=x,
nbcluster=nbcluster,
mc.preschedule = TRUE,
mc.silent = TRUE,
mc.cleanup = TRUE,
mc.cores = min(nbcores, ncol(x)))
junk[[1]]
junk[[1433]]
(junk[[1433]]>junk[[1]])
(junk[[1433]]<junk[[1]])
tata <-  simplify2array(junk)
which(tata==-Inf)
toto <- order(tata, dec=TRUE)
toto <- order(tata, decreasing=TRUE)
toto[1:10]
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
order[1,]
order[1,1:10]
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
if(class(tmp)=="try-error")
bicclust <- log(0)
else
bicclust <- tmp$bic
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
if(class(tmp)=="try-error")
{
bicclust <- log(0)
}
else
{
bicclust <- tmp$bic
}
# pour traiter les warnings comme des erreurs. sinon mclust fait n'importe quoi
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
if(class(tmp)=="try-error")
bicclust <- log(0)
else
bicclust <- tmp$bic
tmp <- Mclust(x[,append(S,order[2])],  G=nbcluster)
if(class(tmp)=="try-error")
bicclustj <- log(0)
else
bicclustj<- tmp$bic
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){
bicclust <- log(0)
}
else{
bicclust <- tmp$bic
}
if(class(tmp)=="try-error")
bicclust <- log(0)
else
bicclust <- tmp$bic
if(class(tmp)=="try-error")
bicclust <- log(0)
else
bicclust <- tmp$bic
if(class(tmp)=="try-error")
{
bicclust <- log(0)
}
else
{
bicclust <- tmp$bic
}
if(class(tmp)=="try-error")
bicclust <- log(0) else bicclust <- tmp$bic
bicclust
tmp$bic
options(warn=2)
mclust.options(warn=TRUE)
S <- order[1]
tmp <- try(Mclust(x[,S], G = nbcluster))
if(class(tmp)=="try-error")
bicclust <- log(0) else bicclust <- tmp$bic
class(tmp)
tmp$bic
tmp$loglik
require(Rmixmod)
toto <- mixmodCluster(x[,order[1]], 2)
toto@bestResult@criterionValue
tmp$bic
tmp <- try(Mclust(x[,order[2]], G = nbcluster))
tmp$bic
?"mclustBIC"
tmp <- try(mclustBIC(x[,order[2]], G = nbcluster))
tmp
?mclust
tmp <- try(Mclust(x[,order[2]], G = nbcluster))
tmp$df
tmp$n
tmp$loglik
-2*tmp$loglik + log(tmp$n)*tmp$df
tmp$bic
toto <- mixmodCluster(x[,order[2]], 2)
toto@bestResult@criterionValue
library(selvarlik)
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
order[1, 1:10]
order[g,] <- orderlik(x, nbcluster[g])
library(selvarlik)
library(selvarlik)
order <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
order[g,] <- orderlik(x, nbcluster[g])
order[1, 1:10]
loglikwrapper <-function(j,x,nbcluster){
# pour traiter les warnings comme des erreurs.
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){return(log(0))} else {return(-tmp$bic)}
}
junk <-  mclapply(X=as.list(1:ncol(x)),
FUN = loglikwrapper,
x=x,
nbcluster=nbcluster,
mc.preschedule = TRUE,
mc.silent = TRUE,
mc.cleanup = TRUE,
mc.cores = min(nbcores, ncol(x)))
junk[[1433]]
j <- 1433
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
tmp
if(class(tmp)=="try-error"){return(log(0))} else {return(-tmp$bic)}
tmp$bic
tmp$bic
tmp
loglikwrapper <-function(j,x,nbcluster){
# pour traiter les warnings comme des erreurs.
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){
return(log(0))
} else return(-tmp$bic)
}
toto <- loglikwrapper(1433, x, 2)
toto
junk <-  mclapply(X=as.list(1:ncol(x)),
FUN = loglikwrapper,
x=x,
nbcluster=nbcluster,
mc.preschedule = TRUE,
mc.silent = TRUE,
mc.cleanup = TRUE,
mc.cores = min(nbcores, ncol(x)))
junk[[1433]]
order(simplify2array(junk), decreasing = TRUE)
orderorder(simplify2array(junk), decreasing = TRUE)
or <- order(simplify2array(junk), decreasing = TRUE)
library(selvarlik)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(tmporder[g,], x, nbcluster[g])
library(selvarlik)
options(warn=2)
mclust.options(warn=TRUE)
S <- tmporder[1]
tmp <- try(Mclust(x[,S], G = nbcluster))
tmporder[1:10]
library(selvarlik)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
tmporder[1:10]
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){
return(log(0))
} else{ return(-tmp$bic)}
}
loglikwrapper <-function(j,x,nbcluster){
# pour traiter les warnings comme des erreurs.
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){
return(log(0))
} else{ return(-tmp$bic)}
}
junk <-  mclapply(X=as.list(1:ncol(x)),
FUN = loglikwrapper,
x=x,
nbcluster=nbcluster,
mc.preschedule = TRUE,
mc.silent = TRUE,
mc.cleanup = TRUE,
mc.cores = min(nbcores, ncol(x)))
junk[[1433]]
toto <- order(simplify2array(junk), decreasing = TRUE)
toto[1]
tmporder <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
junk[[1433]]
tmporder[1:10]
tmporder[1,*1:10]
tmporder[1,1:10]
loglikwrapper <-function(j,x,nbcluster){
# pour traiter les warnings comme des erreurs.
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){
return(log(0))
} else{ return(-tmp$bic)}
}
junk <-  mclapply(X=as.list(1:ncol(x)),
FUN = loglikwrapper,
x=x,
nbcluster=nbcluster,
mc.preschedule = TRUE,
mc.silent = TRUE,
mc.cleanup = TRUE,
mc.cores = min(nbcores, ncol(x)))
toto <- order(simplify2array(junk), decreasing = TRUE)
toto[1]
toto[1:10]
loglikwrapper <-function(j,x,nbcluster){
# pour traiter les warnings comme des erreurs.
options(warn=2)
mclust.options(warn=TRUE)
tmp <- try(Mclust(x[,j], G=nbcluster), silent=TRUE)
if(class(tmp)=="try-error"){
return(log(0))
} else{ return(-tmp$bic)}
}
junk <-  mclapply(X=as.list(1:ncol(x)),
FUN = loglikwrapper,
x=x,
nbcluster=nbcluster,
mc.preschedule = TRUE,
mc.silent = TRUE,
mc.cleanup = TRUE,
mc.cores = min(nbcores, ncol(x)))
toto <- order(simplify2array(junk), decreasing = TRUE)
toto[1:10]
library(selvarlik)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
tmporder[1,1:10]
library(selvarlik)
data(golub)
nbcluster <- 2
nbcluster[1]
length(nbcluster)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(tmporder[g,], x, nbcluster[g])
function (expr, restart)
{
restart$exit <- environment()
.Internal(.addRestart(restart))
expr
}
return(mymodels)
}
library(selvarlik)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
cp <- 1
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
tmporder[1, 1:10]
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(tmporder[g,], x, nbcluster[g])
library(selvarlik)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(tmporder[g,], x, nbcluster[g])
library(selvarlik)
selvarlik <- function(x, nbcluster)
{
tmporder <- matrix(NA, length(nbcluster), ncol(x))
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(tmporder[g,], x, nbcluster[g])
return(mymodels)
}
tmporder <- matrix(NA, length(nbcluster), ncol(x))
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
#print(order)
mymodels <- list()
for(g in 1:length(nbcluster))
mymodels[[g]] <- varsel(tmporder[g,], x, nbcluster[g])
library(selvarlik)
tmporder <- matrix(NA, length(nbcluster), ncol(x))
for(g in 1:length(nbcluster))
tmporder[g,] <- orderlik(x, nbcluster[g])
remove.packages("VarSelLCM", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("VarSelLCM", repos="http://R-Forge.R-project.org")
library(selvarlik)
data(golub)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto <- selvarlik(x, nbcluster = 2)
toto <- selvarlik(x, nbcluster = 2)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto
toto$S
toto$S
toto[[1]]
toto[[2]]
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto
toto$S
source('~/recherche/mixture/ordervarlik/pkg/selvarlik/R/varsel.R')
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto
toto$S
toto[[1]]$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
source('~/recherche/mixture/ordervarlik/pkg/selvarlik/R/selvarlik.R')
source('~/recherche/mixture/ordervarlik/pkg/selvarlik/R/selvarlik.R')
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
require(Rmixmod)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
?BIC
titi <- mixmodCluster(x[,1], nbCluster = 2)
titi@bestResult@likelihood
titi@bestResult@criterionValue
titi@bestResult@model
2*titi@bestResult@likelihood - log(nrow(x))*9
2*titi@bestResult@likelihood - log(nrow(x))*8
2*titi@bestResult@likelihood - log(nrow(x))*7
2*titi@bestResult@likelihood - log(nrow(x))*6
2*titi@bestResult@likelihood - log(nrow(x))*5
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
library(selvarlik)
data(wine)
data(wine)
x
dim(x)
partition
toto <- selvarlik(x, nbcluster = 3)
toto[[1]]$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 3)
toto[[1]]$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 3)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 3)
toto[[1]]$S
toto <- selvarlik(x, nbcluster = 3)
data(golub)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
data(golub)
dim(x)
data(golub)
dim(x)
data(golub)
dim(x)
load("~/recherche/mixture/ordervarlik/pkg/selvarlik/data/golub.rda")
dim(x)
toto <- selvarlik(x, nbcluster = 2)
toto[[1]]$S
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
library(selvarlik)
toto <- selvarlik(x, nbcluster = 2)
